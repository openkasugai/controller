//go:build !ignore_autogenerated

/*
Copyright 2024 NTT Corporation , FUJITSU LIMITED

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1

import (
	corev1 "k8s.io/api/core/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/util/intstr"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AccIDInfo) DeepCopyInto(out *AccIDInfo) {
	*out = *in
	if in.PartitionName != nil {
		in, out := &in.PartitionName, &out.PartitionName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AccIDInfo.
func (in *AccIDInfo) DeepCopy() *AccIDInfo {
	if in == nil {
		return nil
	}
	out := new(AccIDInfo)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AccStatuses) DeepCopyInto(out *AccStatuses) {
	*out = *in
	if in.AcceleratorID != nil {
		in, out := &in.AcceleratorID, &out.AcceleratorID
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AccStatuses.
func (in *AccStatuses) DeepCopy() *AccStatuses {
	if in == nil {
		return nil
	}
	out := new(AccStatuses)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AccStatusesByContainer) DeepCopyInto(out *AccStatusesByContainer) {
	*out = *in
	if in.PartitionName != nil {
		in, out := &in.PartitionName, &out.PartitionName
		*out = new(string)
		**out = **in
	}
	if in.Statuses != nil {
		in, out := &in.Statuses, &out.Statuses
		*out = make([]AccStatuses, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AccStatusesByContainer.
func (in *AccStatusesByContainer) DeepCopy() *AccStatusesByContainer {
	if in == nil {
		return nil
	}
	out := new(AccStatusesByContainer)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AnyData) DeepCopyInto(out *AnyData) {
	*out = *in
	out.Functions = in.Functions
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AnyData.
func (in *AnyData) DeepCopy() *AnyData {
	if in == nil {
		return nil
	}
	out := new(AnyData)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BitstreamData) DeepCopyInto(out *BitstreamData) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BitstreamData.
func (in *BitstreamData) DeepCopy() *BitstreamData {
	if in == nil {
		return nil
	}
	out := new(BitstreamData)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CPUContainer) DeepCopyInto(out *CPUContainer) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Command != nil {
		in, out := &in.Command, &out.Command
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Args != nil {
		in, out := &in.Args, &out.Args
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.SecurityContext != nil {
		in, out := &in.SecurityContext, &out.SecurityContext
		*out = new(corev1.SecurityContext)
		(*in).DeepCopyInto(*out)
	}
	if in.VolumeMounts != nil {
		in, out := &in.VolumeMounts, &out.VolumeMounts
		*out = make([]corev1.VolumeMount, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	in.Resources.DeepCopyInto(&out.Resources)
	if in.Ports != nil {
		in, out := &in.Ports, &out.Ports
		*out = make([]corev1.ContainerPort, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CPUContainer.
func (in *CPUContainer) DeepCopy() *CPUContainer {
	if in == nil {
		return nil
	}
	out := new(CPUContainer)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CPUFuncConfig) DeepCopyInto(out *CPUFuncConfig) {
	*out = *in
	if in.RxProtocol != nil {
		in, out := &in.RxProtocol, &out.RxProtocol
		*out = new(string)
		**out = **in
	}
	if in.TxProtocol != nil {
		in, out := &in.TxProtocol, &out.TxProtocol
		*out = new(string)
		**out = **in
	}
	if in.SharedMemoryGiB != nil {
		in, out := &in.SharedMemoryGiB, &out.SharedMemoryGiB
		*out = new(int32)
		**out = **in
	}
	if in.CopyMemorySize != nil {
		in, out := &in.CopyMemorySize, &out.CopyMemorySize
		*out = new(string)
		**out = **in
	}
	if in.Envs != nil {
		in, out := &in.Envs, &out.Envs
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	in.Template.DeepCopyInto(&out.Template)
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.IPAM != nil {
		in, out := &in.IPAM, &out.IPAM
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CPUFuncConfig.
func (in *CPUFuncConfig) DeepCopy() *CPUFuncConfig {
	if in == nil {
		return nil
	}
	out := new(CPUFuncConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CPUFunction) DeepCopyInto(out *CPUFunction) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CPUFunction.
func (in *CPUFunction) DeepCopy() *CPUFunction {
	if in == nil {
		return nil
	}
	out := new(CPUFunction)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *CPUFunction) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CPUFunctionList) DeepCopyInto(out *CPUFunctionList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]CPUFunction, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CPUFunctionList.
func (in *CPUFunctionList) DeepCopy() *CPUFunctionList {
	if in == nil {
		return nil
	}
	out := new(CPUFunctionList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *CPUFunctionList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CPUFunctionSpec) DeepCopyInto(out *CPUFunctionSpec) {
	*out = *in
	out.DataFlowRef = in.DataFlowRef
	if in.AcceleratorIDs != nil {
		in, out := &in.AcceleratorIDs, &out.AcceleratorIDs
		*out = make([]AccIDInfo, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.FunctionIndex != nil {
		in, out := &in.FunctionIndex, &out.FunctionIndex
		*out = new(int32)
		**out = **in
	}
	if in.Envs != nil {
		in, out := &in.Envs, &out.Envs
		*out = make([]EnvsInfo, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RequestMemorySize != nil {
		in, out := &in.RequestMemorySize, &out.RequestMemorySize
		*out = new(int32)
		**out = **in
	}
	if in.SharedMemory != nil {
		in, out := &in.SharedMemory, &out.SharedMemory
		*out = new(SharedMemorySpec)
		**out = **in
	}
	if in.Protocol != nil {
		in, out := &in.Protocol, &out.Protocol
		*out = new(string)
		**out = **in
	}
	if in.PreviousFunctions != nil {
		in, out := &in.PreviousFunctions, &out.PreviousFunctions
		*out = make(map[string]FromToWBFunction, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.NextFunctions != nil {
		in, out := &in.NextFunctions, &out.NextFunctions
		*out = make(map[string]FromToWBFunction, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Params != nil {
		in, out := &in.Params, &out.Params
		*out = make(map[string]intstr.IntOrString, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CPUFunctionSpec.
func (in *CPUFunctionSpec) DeepCopy() *CPUFunctionSpec {
	if in == nil {
		return nil
	}
	out := new(CPUFunctionSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CPUFunctionStatus) DeepCopyInto(out *CPUFunctionStatus) {
	*out = *in
	out.DataFlowRef = in.DataFlowRef
	if in.SharedMemory != nil {
		in, out := &in.SharedMemory, &out.SharedMemory
		*out = new(SharedMemorySpec)
		**out = **in
	}
	if in.RxProtocol != nil {
		in, out := &in.RxProtocol, &out.RxProtocol
		*out = new(string)
		**out = **in
	}
	if in.TxProtocol != nil {
		in, out := &in.TxProtocol, &out.TxProtocol
		*out = new(string)
		**out = **in
	}
	if in.AdditionalNetwork != nil {
		in, out := &in.AdditionalNetwork, &out.AdditionalNetwork
		*out = new(bool)
		**out = **in
	}
	if in.FunctionIndex != nil {
		in, out := &in.FunctionIndex, &out.FunctionIndex
		*out = new(int32)
		**out = **in
	}
	if in.PodName != nil {
		in, out := &in.PodName, &out.PodName
		*out = new(string)
		**out = **in
	}
	in.StartTime.DeepCopyInto(&out.StartTime)
	if in.IPAddress != nil {
		in, out := &in.IPAddress, &out.IPAddress
		*out = new(string)
		**out = **in
	}
	if in.AcceleratorStatuses != nil {
		in, out := &in.AcceleratorStatuses, &out.AcceleratorStatuses
		*out = make([]AccStatusesByContainer, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CPUFunctionStatus.
func (in *CPUFunctionStatus) DeepCopy() *CPUFunctionStatus {
	if in == nil {
		return nil
	}
	out := new(CPUFunctionStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CPUPodSpec) DeepCopyInto(out *CPUPodSpec) {
	*out = *in
	if in.Volumes != nil {
		in, out := &in.Volumes, &out.Volumes
		*out = make([]corev1.Volume, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Containers != nil {
		in, out := &in.Containers, &out.Containers
		*out = make([]CPUContainer, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CPUPodSpec.
func (in *CPUPodSpec) DeepCopy() *CPUPodSpec {
	if in == nil {
		return nil
	}
	out := new(CPUPodSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EnvsData) DeepCopyInto(out *EnvsData) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EnvsData.
func (in *EnvsData) DeepCopy() *EnvsData {
	if in == nil {
		return nil
	}
	out := new(EnvsData)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EnvsInfo) DeepCopyInto(out *EnvsInfo) {
	*out = *in
	if in.EachEnv != nil {
		in, out := &in.EachEnv, &out.EachEnv
		*out = make([]EnvsData, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EnvsInfo.
func (in *EnvsInfo) DeepCopy() *EnvsInfo {
	if in == nil {
		return nil
	}
	out := new(EnvsInfo)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FPGARxTx) DeepCopyInto(out *FPGARxTx) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FPGARxTx.
func (in *FPGARxTx) DeepCopy() *FPGARxTx {
	if in == nil {
		return nil
	}
	out := new(FPGARxTx)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FrameSizeData) DeepCopyInto(out *FrameSizeData) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FrameSizeData.
func (in *FrameSizeData) DeepCopy() *FrameSizeData {
	if in == nil {
		return nil
	}
	out := new(FrameSizeData)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FromToWBFunction) DeepCopyInto(out *FromToWBFunction) {
	*out = *in
	out.WBFunctionRef = in.WBFunctionRef
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FromToWBFunction.
func (in *FromToWBFunction) DeepCopy() *FromToWBFunction {
	if in == nil {
		return nil
	}
	out := new(FromToWBFunction)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FunctionConfigMap) DeepCopyInto(out *FunctionConfigMap) {
	*out = *in
	if in.Envs != nil {
		in, out := &in.Envs, &out.Envs
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	out.ParentBitstream = in.ParentBitstream
	out.ChildBitstream = in.ChildBitstream
	if in.Commands != nil {
		in, out := &in.Commands, &out.Commands
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Args != nil {
		in, out := &in.Args, &out.Args
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	out.Parameters = in.Parameters
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FunctionConfigMap.
func (in *FunctionConfigMap) DeepCopy() *FunctionConfigMap {
	if in == nil {
		return nil
	}
	out := new(FunctionConfigMap)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FunctionData) DeepCopyInto(out *FunctionData) {
	*out = *in
	out.DataFlowRef = in.DataFlowRef
	if in.AcceleratorIDs != nil {
		in, out := &in.AcceleratorIDs, &out.AcceleratorIDs
		*out = make([]AccIDInfo, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.FunctionIndex != nil {
		in, out := &in.FunctionIndex, &out.FunctionIndex
		*out = new(int32)
		**out = **in
	}
	if in.Envs != nil {
		in, out := &in.Envs, &out.Envs
		*out = make([]EnvsInfo, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RequestMemorySize != nil {
		in, out := &in.RequestMemorySize, &out.RequestMemorySize
		*out = new(int32)
		**out = **in
	}
	out.SharedMemory = in.SharedMemory
	if in.Protocol != nil {
		in, out := &in.Protocol, &out.Protocol
		*out = new(string)
		**out = **in
	}
	if in.ConfigName != nil {
		in, out := &in.ConfigName, &out.ConfigName
		*out = new(string)
		**out = **in
	}
	if in.PreviousFunctions != nil {
		in, out := &in.PreviousFunctions, &out.PreviousFunctions
		*out = make(map[string]FromToWBFunction, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.NextFunctions != nil {
		in, out := &in.NextFunctions, &out.NextFunctions
		*out = make(map[string]FromToWBFunction, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Params != nil {
		in, out := &in.Params, &out.Params
		*out = make(map[string]intstr.IntOrString, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FunctionData.
func (in *FunctionData) DeepCopy() *FunctionData {
	if in == nil {
		return nil
	}
	out := new(FunctionData)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FunctionStatusData) DeepCopyInto(out *FunctionStatusData) {
	*out = *in
	if in.FunctionIndex != nil {
		in, out := &in.FunctionIndex, &out.FunctionIndex
		*out = new(int32)
		**out = **in
	}
	if in.FunctionKernelID != nil {
		in, out := &in.FunctionKernelID, &out.FunctionKernelID
		*out = new(int32)
		**out = **in
	}
	if in.FunctionChannelID != nil {
		in, out := &in.FunctionChannelID, &out.FunctionChannelID
		*out = new(int32)
		**out = **in
	}
	if in.PtuKernelID != nil {
		in, out := &in.PtuKernelID, &out.PtuKernelID
		*out = new(int32)
		**out = **in
	}
	if in.FrameworkKernelID != nil {
		in, out := &in.FrameworkKernelID, &out.FrameworkKernelID
		*out = new(int32)
		**out = **in
	}
	in.Rx.DeepCopyInto(&out.Rx)
	in.Tx.DeepCopyInto(&out.Tx)
	out.SharedMemory = in.SharedMemory
	if in.PodName != nil {
		in, out := &in.PodName, &out.PodName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FunctionStatusData.
func (in *FunctionStatusData) DeepCopy() *FunctionStatusData {
	if in == nil {
		return nil
	}
	out := new(FunctionStatusData)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NetworkData) DeepCopyInto(out *NetworkData) {
	*out = *in
	out.Rx = in.Rx
	out.Tx = in.Tx
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NetworkData.
func (in *NetworkData) DeepCopy() *NetworkData {
	if in == nil {
		return nil
	}
	out := new(NetworkData)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Phase3Data) DeepCopyInto(out *Phase3Data) {
	*out = *in
	if in.DeviceFilePaths != nil {
		in, out := &in.DeviceFilePaths, &out.DeviceFilePaths
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.NetworkInfo != nil {
		in, out := &in.NetworkInfo, &out.NetworkInfo
		*out = make([]NetworkData, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Phase3Data.
func (in *Phase3Data) DeepCopy() *Phase3Data {
	if in == nil {
		return nil
	}
	out := new(Phase3Data)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PodTemplate) DeepCopyInto(out *PodTemplate) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.Spec.DeepCopyInto(&out.Spec)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PodTemplate.
func (in *PodTemplate) DeepCopy() *PodTemplate {
	if in == nil {
		return nil
	}
	out := new(PodTemplate)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RxTxData) DeepCopyInto(out *RxTxData) {
	*out = *in
	if in.IPAddress != nil {
		in, out := &in.IPAddress, &out.IPAddress
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(int32)
		**out = **in
	}
	if in.SubnetAddress != nil {
		in, out := &in.SubnetAddress, &out.SubnetAddress
		*out = new(string)
		**out = **in
	}
	if in.GatewayAddress != nil {
		in, out := &in.GatewayAddress, &out.GatewayAddress
		*out = new(string)
		**out = **in
	}
	if in.DMAChannelID != nil {
		in, out := &in.DMAChannelID, &out.DMAChannelID
		*out = new(int32)
		**out = **in
	}
	if in.LLDMAConnectorID != nil {
		in, out := &in.LLDMAConnectorID, &out.LLDMAConnectorID
		*out = new(int32)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RxTxData.
func (in *RxTxData) DeepCopy() *RxTxData {
	if in == nil {
		return nil
	}
	out := new(RxTxData)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SharedMemorySpec) DeepCopyInto(out *SharedMemorySpec) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SharedMemorySpec.
func (in *SharedMemorySpec) DeepCopy() *SharedMemorySpec {
	if in == nil {
		return nil
	}
	out := new(SharedMemorySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WBNamespacedName) DeepCopyInto(out *WBNamespacedName) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WBNamespacedName.
func (in *WBNamespacedName) DeepCopy() *WBNamespacedName {
	if in == nil {
		return nil
	}
	out := new(WBNamespacedName)
	in.DeepCopyInto(out)
	return out
}
